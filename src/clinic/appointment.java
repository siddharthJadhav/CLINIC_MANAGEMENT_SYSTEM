/*
 * appointment.java
 *
 * Created on February 6, 2012, 4:49 PM
 */

package clinic;
import javax.swing.JScrollPane;
import javax.swing.*;
import java.sql.*;
import java.util.Vector;
/**
 *
 * @author  Administrator
 */
public class appointment extends javax.swing.JFrame {
    String fname,mname,lname,code,contact,date;
    JTable jTable3;
    JScrollPane jScrollPane3;
    Connection con;
    Statement st;
    ResultSet rs;
    
    /** Creates new form appointment */
    public appointment() {
        initComponents();
        
         fname=txtfname.getText();
      mname=txtmname.getText();
      lname=txtlname.getText();
      //code=txtcode.getText();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lbldate = new javax.swing.JLabel();
        txtlname = new javax.swing.JTextField();
        lbllname = new javax.swing.JLabel();
        txtmname = new javax.swing.JTextField();
        lblmname = new javax.swing.JLabel();
        lblname = new javax.swing.JLabel();
        txtfname = new javax.swing.JTextField();
        btnsubmit = new javax.swing.JButton();
        btnexit = new javax.swing.JButton();
        cboday = new javax.swing.JComboBox();
        cbomonth = new javax.swing.JComboBox();
        cboyear = new javax.swing.JComboBox();
        lbltime = new javax.swing.JLabel();
        txttime = new javax.swing.JTextField();
        cboam = new javax.swing.JComboBox();
        btndone = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblappointment = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Appointment");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbldate.setFont(new java.awt.Font("Times New Roman", 0, 14));
        lbldate.setText("Date");
        lbldate.setName("lbldate"); // NOI18N

        txtlname.setFont(new java.awt.Font("Times New Roman", 0, 14));
        txtlname.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtlname.setName("txtlname"); // NOI18N
        txtlname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtlnameFocusLost(evt);
            }
        });
        txtlname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtlnameKeyReleased(evt);
            }
        });

        lbllname.setFont(new java.awt.Font("Times New Roman", 0, 14));
        lbllname.setText("Last Name");
        lbllname.setName("lbllname"); // NOI18N

        txtmname.setFont(new java.awt.Font("Times New Roman", 0, 14));
        txtmname.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtmname.setName("txtmname"); // NOI18N
        txtmname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtmnameKeyReleased(evt);
            }
        });

        lblmname.setFont(new java.awt.Font("Times New Roman", 0, 14));
        lblmname.setText("Middle Name");
        lblmname.setName("lblmname"); // NOI18N

        lblname.setFont(new java.awt.Font("Times New Roman", 0, 14));
        lblname.setText("First Name");
        lblname.setName("lblfname"); // NOI18N

        txtfname.setFont(new java.awt.Font("Times New Roman", 0, 14));
        txtfname.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtfname.setName("txtfname"); // NOI18N
        txtfname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfnameKeyReleased(evt);
            }
        });

        btnsubmit.setFont(new java.awt.Font("Times New Roman", 0, 14));
        btnsubmit.setText("submit");
        btnsubmit.setName("btnsubmit"); // NOI18N
        btnsubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubmitActionPerformed(evt);
            }
        });

        btnexit.setFont(new java.awt.Font("Times New Roman", 0, 14));
        btnexit.setText("Close");
        btnexit.setName("btnexit"); // NOI18N
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        cboday.setFont(new java.awt.Font("Times New Roman", 0, 14));
        cboday.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        cboday.setName("cboday"); // NOI18N

        cbomonth.setFont(new java.awt.Font("Times New Roman", 0, 14));
        cbomonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" }));
        cbomonth.setName("cbomonth"); // NOI18N

        cboyear.setFont(new java.awt.Font("Times New Roman", 0, 14));
        cboyear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2012", "2013", "2014", "2015", "2016", "2017", "2017", "2018", "2019", "2020" }));
        cboyear.setName("cboyear"); // NOI18N

        lbltime.setFont(new java.awt.Font("Times New Roman", 0, 14));
        lbltime.setText("Time");
        lbltime.setName("lbltime"); // NOI18N

        txttime.setFont(new java.awt.Font("Times New Roman", 0, 14));
        txttime.setName("txttime"); // NOI18N
        txttime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txttimeFocusGained(evt);
            }
        });
        txttime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txttimeKeyReleased(evt);
            }
        });

        cboam.setFont(new java.awt.Font("Times New Roman", 0, 14));
        cboam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "am", "pm" }));
        cboam.setName("cboam"); // NOI18N

        btndone.setFont(new java.awt.Font("Times New Roman", 0, 14));
        btndone.setText("Done");
        btndone.setName("btndone"); // NOI18N
        btndone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndoneActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(btnsubmit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btndone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnexit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                .add(lbldate)
                                .add(42, 42, 42)
                                .add(cboday, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cbomonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(lbltime)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(73, 73, 73)
                                        .add(txttime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cboam, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cboyear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblname)
                            .add(lblmname)
                            .add(lbllname))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, txtmname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, txtfname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, txtlname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(33, 33, 33)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblname)
                    .add(txtfname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(36, 36, 36)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblmname)
                    .add(txtmname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(30, 30, 30)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbllname)
                    .add(txtlname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(47, 47, 47)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbldate)
                    .add(cbomonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cboyear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cboday, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(43, 43, 43)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbltime)
                    .add(txttime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cboam, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(57, 57, 57)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnsubmit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnexit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btndone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(java.awt.Color.lightGray);
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "First Name", "Middle Name", "Last Name", "Code", "date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        lblappointment.setFont(new java.awt.Font("Times New Roman", 0, 36));
        lblappointment.setForeground(new java.awt.Color(0, 102, 51));
        lblappointment.setText("Appointment");
        lblappointment.setName("lblappointment"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 26, Short.MAX_VALUE)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 616, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(337, 337, 337)
                        .add(lblappointment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(27, 27, 27)
                .add(lblappointment)
                .add(34, 34, 34)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 601, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txttimeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttimeKeyReleased
// TODO add your handling code here:
            String s=txttime.getText();
       
            if(!(s.equals("")))
            {                     
            int a=s.length()-1;
            int i=(int)s.charAt(a);
            if(!(i>47&&i<59))
                {
                    JOptionPane.showMessageDialog(this,"Enter only time","Warning",JOptionPane.WARNING_MESSAGE);
                    txttime.setText("");
                 }
            else
                {
                   int t5=Integer.parseInt(s);   
                    if(!(t5>0&&t5<13))
                        {
                            JOptionPane.showMessageDialog(this,"Enter time in 12 hour format","Warning",JOptionPane.WARNING_MESSAGE); 
                             txttime.setText("");
                         } 
            }
            }
        
            
    }//GEN-LAST:event_txttimeKeyReleased

    private void txttimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttimeFocusGained
// TODO add your handling code here:
                    String fname1,fname2;
                 fname1=txtfname.getText().trim();
                 if(!(fname1.equals("")))
                 {   
                  fname2 = fname1.substring(0,1).toUpperCase() +fname1.substring(1);
                  txtfname.setText(fname2);
                 }
        
                 String mname1,mname2;
                 mname1=txtmname.getText().trim();
                 if(!(mname1.equals("")))
                 { 
                  mname2 = mname1.substring(0,1).toUpperCase() +mname1.substring(1);
                  txtmname.setText(mname2);
                 }
                 
                 String lname1,lname2;
                 lname1=txtlname.getText().trim();
                 if(!(lname1.equals("")))
                 { 
                  lname2 = lname1.substring(0,1).toUpperCase() +lname1.substring(1);
                  txtlname.setText(lname2);
                 }
    }//GEN-LAST:event_txttimeFocusGained

    private void txtlnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtlnameFocusLost
// TODO add your handling code here:
     
    }//GEN-LAST:event_txtlnameFocusLost

    private void btndoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndoneActionPerformed
// TODO add your handling code here:
        String s="",s1="";
    int i=jTable3.getSelectedRow();
    int j=jTable3.getSelectedColumn(); 
    if(i < 0 && j < 0)
    {
     JOptionPane.showMessageDialog(this,"No Record Selected");
    }
    else
    {
    Object o,p;
    o=jTable3.getValueAt(i,0);
    p=jTable3.getValueAt(i,2);
    s=o.toString();  
    s1=p.toString();
    try 
       {
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
         con=DriverManager.getConnection("jdbc:odbc:rock");
         st=con.createStatement();
    int del=JOptionPane.showConfirmDialog(this,"Is Treatement Done of "+s+" "+s1,"Information",JOptionPane.YES_NO_OPTION);
     if(del==0)
     {
        int z=st.executeUpdate("delete from appointment where fname='"+s+"'and lname='"+s1+"'");
     }
        st.close();
        con.close();
        }
          catch(SQLException sq)
         {
              JOptionPane.showMessageDialog(this,"Database Error","Appointment",JOptionPane.ERROR_MESSAGE);   
             
         } 
         catch(Exception e)
         {
          JOptionPane.showMessageDialog(this,"There Is Error Occur ","Error",JOptionPane.ERROR_MESSAGE);  
         
         }  
       }
    }//GEN-LAST:event_btndoneActionPerformed
   
    private void txtlnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtlnameKeyReleased
// TODO add your handling code here:
             String s=txtlname.getText();
        int a=s.length()-1;
        int i=(int)s.charAt(a);
       
        if(!((i>64&&i<91)||(i>95&&i<123)))
        {
           JOptionPane.showMessageDialog(this,"Enter only letter");
           txtlname.setText("");
            
        }  
    }//GEN-LAST:event_txtlnameKeyReleased

    private void txtmnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmnameKeyReleased
// TODO add your handling code here:
        String s=txtmname.getText();
        int a=s.length()-1;
        int i=(int)s.charAt(a);
       
        if(!((i>64&&i<91)||(i>95&&i<123)))
        {
           JOptionPane.showMessageDialog(this,"Enter only letter");
           txtmname.setText("");
            
        }  
    }//GEN-LAST:event_txtmnameKeyReleased

    private void txtfnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfnameKeyReleased
// TODO add your handling code here:
        String s=txtfname.getText();
        int a=s.length()-1;
        int i=(int)s.charAt(a);
       
        if(!((i>64&&i<91)||(i>95&&i<123)))
        {
            JOptionPane.showMessageDialog(this,"Enter only letter");
           txtfname.setText("");
            
        }  
    }//GEN-LAST:event_txtfnameKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
  
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
// TODO add your handling code here: 
                 try{
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            con=DriverManager.getConnection("jdbc:odbc:rock");
            st=con.createStatement();
            int rst=st.executeUpdate("delete from appointment where dates <(select convert(varchar(12),getdate(),106))");
            con.close();
        } 
          catch(SQLException sq)
         {
              JOptionPane.showMessageDialog(this,"Database Error","Appointment",JOptionPane.ERROR_MESSAGE);   
              this.dispose(); 
         } 
         catch(Exception e)
         {
          JOptionPane.showMessageDialog(this,"There Is Error Occur ","Error",JOptionPane.ERROR_MESSAGE);  
          this.dispose();
         }
        
        
    }//GEN-LAST:event_formWindowClosed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
// TODO add your handling code here:
      homepage hp=new homepage(); 
      hp.toBack();
      appointment a=new appointment();
      this.dispose();
    }//GEN-LAST:event_btnexitActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       

        int i;
        Vector columnnames=new Vector();
        Vector data=new Vector();
   
       try
       {
         Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
         con=DriverManager.getConnection("jdbc:odbc:rock");
     
         st=con.createStatement();
         String a,b;
         a="select convert(char(12),getdate(),103)";
         b="select convert(varchar(8),getdate(),108)";
         rs=st.executeQuery("select fname as F_Name,mname as M_Name,lname as L_Name,convert(varchar(12),dates,106)as date,convert(varchar(10),dates,108)as time from appointment  where dates >(select convert(varchar(12),getdate(),106))order by dates asc");        
         ResultSetMetaData md=rs.getMetaData();
         int columns=md.getColumnCount();
         for(i=1;i<=columns;i++)
          {
             columnnames.addElement(md.getColumnName(i));
          }
         while(rs.next())
          {
           Vector row=new Vector(columns);
           for(i=1;i<=columns;i++)
             {
              row.addElement(rs.getObject(i));
             }
           data.addElement(row);
          }
         st.close();
        con.close();
        } catch(SQLException sq)
         {
              JOptionPane.showMessageDialog(this,"Database Error","Appointment",JOptionPane.ERROR_MESSAGE);   
              this.dispose(); 
         } 
         catch(Exception e)
         {
          JOptionPane.showMessageDialog(this,"There Is Error Occur ","Error",JOptionPane.ERROR_MESSAGE);  
          this.dispose();
         }
      jTable3=new JTable(data,columnnames);
      jScrollPane3=new JScrollPane(jTable3);
      jTable1.setCellEditor(jTable3.getCellEditor());
      jScrollPane1.setViewportView(jTable3);
        
    }//GEN-LAST:event_formWindowActivated

    private void btnsubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubmitActionPerformed
     String day,month,year,time,time1,z,am;
     day=(String)cboday.getSelectedItem();
     month=(String)cbomonth.getSelectedItem();
     year=(String)cboyear.getSelectedItem();
     String date1=day+"-"+month+"-"+year;
     time=txttime.getText();
     am=(String)cboam.getSelectedItem();   
     String date2=date1+" "+time+" "+am;        
        
      fname=txtfname.getText().trim();
      mname=txtmname.getText().trim();
      lname=txtlname.getText().trim();

      if(fname.equals("")||lname.equals(""))
      { 
          JOptionPane.showMessageDialog(this,"Please Enter full name!!!!");
      }  
      else
      {    
     
          try
          {
       Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
       con=DriverManager.getConnection("jdbc:odbc:rock");
       st=con.createStatement();
       int i=st.executeUpdate("insert into appointment values('"+fname+"','"+mname+"','"+lname+"','"+date2+"')");
      // JOptionPane.showMessageDialog(this,"data saved");
       txtfname.setText("");
       txtmname.setText("");
       txtlname.setText("");
       txttime.setText(""); 
       st.close();
       con.close();
          }
          catch(SQLException se)
          {
          JOptionPane.showMessageDialog(this,"Invalid Date Or Time"); 
          txttime.setText("");
          }
     
      
         catch(Exception e)
         {
          JOptionPane.showMessageDialog(this,"There Is Any Error Occur ","Error",JOptionPane.ERROR_MESSAGE);  
          
         }
      }
      
      
      
      
      int i;
        Vector columnnames=new Vector();
        Vector data=new Vector();
   
       try
       {
         Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
         con=DriverManager.getConnection("jdbc:odbc:rock");
     
         st=con.createStatement();
         String a,b;
         a="select convert(char(12),getdate(),103)";
         b="select convert(varchar(8),getdate(),108)";
         rs=st.executeQuery("select fname as F_Name,mname as M_Name,lname as L_Name,convert(varchar(12),dates,106)as date,convert(varchar(10),dates,108)as time from appointment  where dates >(select convert(varchar(12),getdate(),106))order by dates asc");        
         ResultSetMetaData md=rs.getMetaData();
         int columns=md.getColumnCount();
         for(i=1;i<=columns;i++)
          {
             columnnames.addElement(md.getColumnName(i));
          }
         while(rs.next())
          {
           Vector row=new Vector(columns);
           for(i=1;i<=columns;i++)
             {
              row.addElement(rs.getObject(i));
             }
           data.addElement(row);
          }
         st.close();
        con.close();
        } catch(SQLException sq)
         {
              JOptionPane.showMessageDialog(this,"Database Error","Appointment",JOptionPane.ERROR_MESSAGE);   
              this.dispose(); 
         } 
         catch(Exception e)
         {
          JOptionPane.showMessageDialog(this,"There Is Error Occur ","Error",JOptionPane.ERROR_MESSAGE);  
          this.dispose();
         }
      jTable3=new JTable(data,columnnames);
      jScrollPane3=new JScrollPane(jTable3);
      jTable1.setCellEditor(jTable3.getCellEditor());
      jScrollPane1.setViewportView(jTable3);
        
      
      
// TODO add your handling code here:
    }//GEN-LAST:event_btnsubmitActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new appointment().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btndone;
    private javax.swing.JButton btnexit;
    private javax.swing.JButton btnsubmit;
    private javax.swing.JComboBox cboam;
    private javax.swing.JComboBox cboday;
    private javax.swing.JComboBox cbomonth;
    private javax.swing.JComboBox cboyear;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblappointment;
    private javax.swing.JLabel lbldate;
    private javax.swing.JLabel lbllname;
    private javax.swing.JLabel lblmname;
    private javax.swing.JLabel lblname;
    private javax.swing.JLabel lbltime;
    private javax.swing.JTextField txtfname;
    private javax.swing.JTextField txtlname;
    private javax.swing.JTextField txtmname;
    private javax.swing.JTextField txttime;
    // End of variables declaration//GEN-END:variables
    
}
